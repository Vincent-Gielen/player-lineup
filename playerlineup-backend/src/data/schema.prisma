// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ...

model Player {
  @@map("players")             // Set the table name to "players"

  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  name         String         @db.VarChar(255)
  position     String         @db.VarChar(255)
  user_id      Int            @db.UnsignedInt
  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_player_user")
  teams        Team[]         
  stats        Stat[]
}

model Team {
  @@map("teams") // Set the table name to "teams"

  id          Int             @id @default(autoincrement()) @db.UnsignedInt
  name        String          @db.VarChar(255)
  user_id     Int             @db.UnsignedInt
  user        User            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_team_user")
  players     Player[]   

  @@unique([name, user_id], map: "idx_team_name_user_id_unique")     
}

model User {
  @@map("users")               // Set the table name to "users"

  id            Int            @id @default(autoincrement()) @db.UnsignedInt
  name          String         @db.VarChar(255)
  email         String         @unique(map: "idx_user_email_unique") @db.VarChar(255)
  password_hash String         @db.VarChar(255)
  roles         Json
  players       Player[]       
  teams         Team[]
}

model Stat {
  @@map("stats")

  id          Int             @id @default(autoincrement()) @db.UnsignedInt
  player_id   Int             @db.UnsignedInt
  player      Player          @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_stat_player")
  points      Int             @db.Int
  rebounds    Int             @db.Int
  assists     Int             @db.Int
  steals      Int             @db.Int
  turnovers   Int             @db.Int
}

